// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name TensorFlowLite
import Darwin
import Foundation
import Swift
@_exported import TensorFlowLite
import TensorFlowLiteC
import _Concurrency
public protocol Delegate : AnyObject {
  typealias CDelegate = Swift.UnsafeMutablePointer<TensorFlowLiteC.TfLiteDelegate>
  var cDelegate: Self.CDelegate { get }
}
final public class Interpreter {
  final public let options: TensorFlowLite.Interpreter.Options?
  final public let delegates: [TensorFlowLite.Delegate]?
  final public var inputTensorCount: Swift.Int {
    get
  }
  final public var outputTensorCount: Swift.Int {
    get
  }
  public init(modelPath: Swift.String, options: TensorFlowLite.Interpreter.Options? = nil, delegates: [TensorFlowLite.Delegate]? = nil) throws
  @objc deinit
  final public func invoke() throws
  final public func input(at index: Swift.Int) throws -> TensorFlowLite.Tensor
  final public func output(at index: Swift.Int) throws -> TensorFlowLite.Tensor
  final public func resizeInput(at index: Swift.Int, to shape: TensorFlowLite.Tensor.Shape) throws
  @discardableResult
  final public func copy(_ data: Foundation.Data, toInputAt index: Swift.Int) throws -> TensorFlowLite.Tensor
  final public func allocateTensors() throws
}
extension TensorFlowLite.Interpreter {
  public struct Options : Swift.Equatable, Swift.Hashable {
    public var threadCount: Swift.Int?
    public var isXNNPackEnabled: Swift.Bool
    public init()
    public static func == (a: TensorFlowLite.Interpreter.Options, b: TensorFlowLite.Interpreter.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, deprecated, renamed: "Interpreter.Options")
public typealias InterpreterOptions = TensorFlowLite.Interpreter.Options
public enum InterpreterError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorIndex(index: Swift.Int, maxIndex: Swift.Int)
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToLoadModel
  case failedToCreateInterpreter
  case failedToResizeInputTensor(index: Swift.Int)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case allocateTensorsRequired
  case invokeInterpreterRequired
  case tensorFlowLiteError(Swift.String)
  public static func == (a: TensorFlowLite.InterpreterError, b: TensorFlowLite.InterpreterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TensorFlowLite.InterpreterError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension TensorFlowLite.InterpreterError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct QuantizationParameters : Swift.Equatable, Swift.Hashable {
  public let scale: Swift.Float
  public let zeroPoint: Swift.Int
  public static func == (a: TensorFlowLite.QuantizationParameters, b: TensorFlowLite.QuantizationParameters) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Tensor : Swift.Equatable, Swift.Hashable {
  public let name: Swift.String
  public let dataType: TensorFlowLite.Tensor.DataType
  public let shape: TensorFlowLite.Tensor.Shape
  public let data: Foundation.Data
  public let quantizationParameters: TensorFlowLite.QuantizationParameters?
  public static func == (a: TensorFlowLite.Tensor, b: TensorFlowLite.Tensor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TensorFlowLite.Tensor {
  public enum DataType : Swift.Equatable, Swift.Hashable {
    case bool
    case uInt8
    case int16
    case int32
    case int64
    case float16
    case float32
    case float64
    public static func == (a: TensorFlowLite.Tensor.DataType, b: TensorFlowLite.Tensor.DataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TensorFlowLite.Tensor {
  public struct Shape : Swift.Equatable, Swift.Hashable {
    public let rank: Swift.Int
    public let dimensions: [Swift.Int]
    public init(_ dimensions: [Swift.Int])
    public init(_ elements: Swift.Int...)
    public static func == (a: TensorFlowLite.Tensor.Shape, b: TensorFlowLite.Tensor.Shape) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TensorFlowLite.Tensor.Shape : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: Swift.Int...)
  public typealias ArrayLiteralElement = Swift.Int
}
public enum Runtime {
  public static var version: Swift.String {
    get
  }
}
